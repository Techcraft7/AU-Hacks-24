<div class="board">
	@for (int y = 0; y < 5; y++)
	{
		@for (int x = 0; x < 5; x++)
		{
			Planet p = Map.GetPlanet(x, y);
			<div class="cell">
				<svg viewBox="0 0 256 256" width="100%">
					@{
						var roads = Map.GetRoads(x, y);
					}
					<line x1="50%" y1="50%" x2="50%" y2="0%" stroke-width="5%" stroke="@GetRoadColor(x, y, Direction.UP, roads.Up)" />
					<line x1="50%" y1="50%" x2="50%" y2="100%" stroke-width="5%" stroke="@GetRoadColor(x, y, Direction.DOWN, roads.Down)" />
					<line x1="50%" y1="50%" x2="0%" y2="50%" stroke-width="5%" stroke="@GetRoadColor(x, y, Direction.LEFT, roads.Left)" />
					<line x1="50%" y1="50%" x2="100%" y2="50%" stroke-width="5%" stroke="@GetRoadColor(x, y, Direction.RIGHT, roads.Right)" />
					@if (p.Owner >= 1)
					{
						<image style="filter: @GetColorFilter(p.Owner);" x="38.5%" y="5%" width="25%" height="25%" href="/img/VerySuperCoolColony.png" />
					}
					<image href="@GetPlanetImage(p.Kind)" x="20%" y="20%" width="60%" height="60%" />
					@if (p.Kind is not (PlanetKind.EMPTY or PlanetKind.OUTPOST))
					{
						<text>
							<text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" stroke="white" font-weight="bold" font-size="50px">@p.Number</text>
						</text>
					}
				</svg>
			</div>
		}
	}
</div>

@code {
	[Parameter]
	public Map Map { get; set; } = null!;
	private List<RoadToBuild> RoadsToBuild { get; set; } = [];

	private string GetRoadColor(int x, int y, Direction dir, int? id) =>
		RoadsToBuild.Contains(new(x, y, dir)) ? "white" : GetPlayerColor(id);

	private static string GetPlanetImage(PlanetKind kind) => kind switch
	{
		PlanetKind.GRAVITRONIUM => "/img/GravitroniumPlanet.png",
		PlanetKind.COBALT => "/img/CobaltPlanet.png",
		PlanetKind.OXYGEN => "/img/OxygenPlanet.png",
		PlanetKind.FOOD => "/img/FoodPlanet.png",
		PlanetKind.WATER => "/img/WaterPlanet.png",
		PlanetKind.OUTPOST => "/img/Outpost.png",
		PlanetKind.EMPTY => "/img/EmptyPlanet.png",
		_ => ""
	};

	public static string GetPlayerColor(int? id) => id switch
	{
		1 => "red",
		2 => "blue",
		3 => "yellow",
		4 => "lime",
		_ => "transparent"
	};

	private static string GetColorFilter(int? id) => id switch
	{
		1 => "invert(15%) sepia(87%) saturate(5409%) hue-rotate(4deg) brightness(105%) contrast(126%)",
		2 => "invert(8%) sepia(100%) saturate(6217%) hue-rotate(246deg) brightness(109%) contrast(144%)",
		3 => "brightness(0) saturate(100%) invert(94%) sepia(40%) saturate(2364%) hue-rotate(358deg) brightness(109%) contrast(103%)",
		4 => "brightness(0) saturate(100%) invert(64%) sepia(33%) saturate(6491%) hue-rotate(81deg) brightness(115%) contrast(126%)",
		_ => ""
	};
}