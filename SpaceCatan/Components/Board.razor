<div class="board">
	@for (int y = 0; y < 5; y++)
	{
		@for (int x = 0; x < 5; x++)
		{
			Planet p = Game.Map.GetPlanet(x, y);
			<div class="cell">
				<svg viewBox="0 0 256 256" width="100%">
					@{
						var roads = Game.Map.GetRoads(x, y);
						int xCopy = x;
						int yCopy = y;
					}
					<line style="cursor: @GetRoadCursor(xCopy, yCopy, Direction.UP);" x1="50%" y1="50%" x2="50%" y2="0%" stroke-width="15%" stroke="@GetRoadColor(x, y, Direction.UP, roads.Up)" @onclick="() => ClickRoad(xCopy, yCopy, Direction.UP, true)" />
					<line style="cursor: @GetRoadCursor(xCopy, yCopy, Direction.DOWN);" x1="50%" y1="50%" x2="50%" y2="100%" stroke-width="15%" stroke="@GetRoadColor(x, y, Direction.DOWN, roads.Down)" @onclick="() => ClickRoad(xCopy, yCopy, Direction.DOWN, true)" />
					<line style="cursor: @GetRoadCursor(xCopy, yCopy, Direction.LEFT);" x1="50%" y1="50%" x2="0%" y2="50%" stroke-width="15%" stroke="@GetRoadColor(x, y, Direction.LEFT, roads.Left)" @onclick="() => ClickRoad(xCopy, yCopy, Direction.LEFT, true)" />
					<line style="cursor: @GetRoadCursor(xCopy, yCopy, Direction.RIGHT);" x1="50%" y1="50%" x2="100%" y2="50%" stroke-width="15%" stroke="@GetRoadColor(x, y, Direction.RIGHT, roads.Right)" @onclick="() => ClickRoad(xCopy, yCopy, Direction.RIGHT, true)" />
					@if (p.Owner >= 1)
					{
						<image style="filter: @GetColorFilter(p.Owner); pointer-events: none;" x="38.5%" y="5%" width="25%" height="25%" href="/img/VerySuperCoolColony.png" />
					}
					<image style="cursor: pointer;" href="@GetPlanetImage(p.Kind)" x="20%" y="20%" width="60%" height="60%" @onclick="() => ClickPlanet(xCopy, yCopy)" />
					@if (p.Kind is not (PlanetKind.EMPTY or PlanetKind.OUTPOST))
					{
						<text>
							<text style="pointer-events: none; user-select: none;" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" stroke="white" font-weight="bold" font-size="50px">@p.Number</text>
						</text>
					}

					@if (ShowBuildIndicator(xCopy, yCopy, Direction.UP))
					{
						<text>
							<text style="transform: scaleX(200%) rotate(180deg) translate(-25%, -10%); cursor: pointer; user-select: none;" dominant-baseline="middle" text-anchor="middle" stroke="white" fill="white" font-weight="bold" font-size="30px" @onclick="() => ClickRoad(xCopy, yCopy, Direction.UP)">V</text>
						</text>
					}
					@if (ShowBuildIndicator(xCopy, yCopy, Direction.DOWN))
					{
						<text>
							<text style="transform: scaleX(200%) rotate(0deg) translate(25%, 90%); cursor: pointer; user-select: none;" dominant-baseline="middle" text-anchor="middle" stroke="white" fill="white" font-weight="bold" font-size="30px" @onclick="() => ClickRoad(xCopy, yCopy, Direction.DOWN)">V</text>
						</text>
					}
					@if (ShowBuildIndicator(xCopy, yCopy, Direction.LEFT))
					{
						<text>
							<text style="transform: scaleY(200%) rotate(90deg) translate(25%, -10%); cursor: pointer; user-select: none;" dominant-baseline="middle" text-anchor="middle" stroke="white" fill="white" font-weight="bold" font-size="30px" @onclick="() => ClickRoad(xCopy, yCopy, Direction.LEFT)">V</text>
						</text>
					}
					@if (ShowBuildIndicator(xCopy, yCopy, Direction.RIGHT))
					{
						<text>
					<text style="transform: scaleY(200%) rotate(270deg) translate(-25%, 90%); cursor: pointer; user-select: none;" dominant-baseline="middle" text-anchor="middle" stroke="white" fill="white" font-weight="bold" font-size="30px" @onclick="() => ClickRoad(xCopy, yCopy, Direction.RIGHT)">V</text>
						</text>
					}
				</svg>
			</div>
		}
	}
</div>

@code {
	[Parameter]
	public Game Game { get; set; } = null!;
	public IReadOnlyList<RoadToBuild> RoadsToBuild => roadsToBuild;
	private List<RoadToBuild> roadsToBuild = [];

	private string GetRoadColor(int x, int y, Direction dir, int? id) =>
		roadsToBuild.Contains(new(x, y, dir)) ? "white" : GetPlayerColor(id);


	private void ClickPlanet(int x, int y)
	{

	}

	private bool ShowBuildIndicator(int x, int y, Direction direction)
	{
		return (x, y, direction) switch
		{
			(0, _, Direction.LEFT) => false,
			(4, _, Direction.RIGHT) => false,
			(_, 0, Direction.UP) => false,
			(_, 4, Direction.DOWN) => false,
			_ => !RoadsToBuild.Contains(new(x, y, direction)) && Game.Map.CanBuildRoadAt(x, y, direction, Game.CurrentPlayer, RoadsToBuild)
		};
	}

	private void ClickRoad(int x, int y, Direction direction, bool onlyRemove = false)
	{
		if (onlyRemove && ShowBuildIndicator(x, y, direction))
		{
			return;
		}
		RoadToBuild r = new(x, y, direction);
		if (roadsToBuild.Contains(r))
		{
			roadsToBuild.Remove(r);
			roadsToBuild.Remove(r.Opposite());
		}
		else if (!onlyRemove)
		{
			roadsToBuild.Add(r);
			roadsToBuild.Add(r.Opposite());
		}
		StateHasChanged();
	}

	private string GetRoadCursor(int x, int y, Direction direction)
	{
		return roadsToBuild.Contains(new(x, y, direction)) ? "pointer" : "unset";
	}

	private static string GetPlanetImage(PlanetKind kind) => kind switch
	{
		PlanetKind.GRAVITRONIUM => "/img/GravitroniumPlanet.png",
		PlanetKind.COBALT => "/img/CobaltPlanet.png",
		PlanetKind.OXYGEN => "/img/OxygenPlanet.png",
		PlanetKind.FOOD => "/img/FoodPlanet.png",
		PlanetKind.WATER => "/img/WaterPlanet.png",
		PlanetKind.OUTPOST => "/img/Outpost.png",
		PlanetKind.EMPTY => "/img/EmptyPlanet.png",
		_ => ""
	};

	public static string GetPlayerColor(int? id) => id switch
	{
		1 => "red",
		2 => "blue",
		3 => "yellow",
		4 => "lime",
		_ => "transparent"
	};

	private static string GetColorFilter(int? id) => id switch
	{
		1 => "invert(15%) sepia(87%) saturate(5409%) hue-rotate(4deg) brightness(105%) contrast(126%)",
		2 => "invert(8%) sepia(100%) saturate(6217%) hue-rotate(246deg) brightness(109%) contrast(144%)",
		3 => "brightness(0) saturate(100%) invert(94%) sepia(40%) saturate(2364%) hue-rotate(358deg) brightness(109%) contrast(103%)",
		4 => "brightness(0) saturate(100%) invert(64%) sepia(33%) saturate(6491%) hue-rotate(81deg) brightness(115%) contrast(126%)",
		_ => ""
	};
}