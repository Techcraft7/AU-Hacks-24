@page "/play"
@implements IDisposable
@attribute [Authorize]
@inject IUserStore UserStore
@inject ILogger<Play> Logger
@inject NavigationManager NavManager
@inject ILobbyStore LobbyStore
@rendermode InteractiveServer

<section class="section">
	<div class="columns">
		<div class="column"></div>
		<div class="column is-three-fifths p-0">
			<Board Map="@Lobby.Game.Map" />
		</div>
		<div class="column split">
			<div class="log">actions</div>
			<div class="bottom">
				@foreach (string str in Lobby.Log)
				{
					<p>@str</p>
				}
			</div>
		</div>
	</div>
</section>

@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
	private Lobby Lobby { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		var auth = await AuthenticationStateTask;
		string userID = auth.User.FindFirst("id")?.Value ?? string.Empty;

		var (user, error) = await UserStore.GetUser(userID, default);
		if (error is not null)
		{
			Logger.LogError(error, "Failed to get user data");
			NavManager.NavigateTo("/");
			return;
		}
		if (user is null)
		{
			Logger.LogWarning("Non-existent user tried to join a game");
			NavManager.NavigateTo("/");
			return;
		}

		if (user.CurrentLobby is null)
		{
			do
			{
				(Lobby, error) = await LobbyStore.GetJoinableLobby(default);
				if (error is not null)
				{
					Logger.LogError(error, "Failed to get lobby");
					NavManager.NavigateTo("/");
					return;
				}

				user.CurrentLobby = Lobby.ID;
				error = await UserStore.UpdateUser(user, default);
				if (error is not null)
				{
					Logger.LogError(error, "Failed to assign user to lobby");
					NavManager.NavigateTo("/");
					return;
				}

			} while (!await Lobby.TryAddPlayer(user));
		}
		else
		{
			(Lobby? l, error) = await LobbyStore.GetLobby(user.CurrentLobby.Value, default);
			if (error is not null)
			{
				Logger.LogError(error, "Failed to get lobby");
				NavManager.NavigateTo("/");
				return;
			}
			if (l is null)
			{
				user.CurrentLobby = null;
				await UserStore.UpdateUser(user, default);
				NavManager.NavigateTo("/play");
				return;
			}
		}

		Lobby.LobbyUpdated += LobbyUpdate;
		StateHasChanged();
	}

	private Task LobbyUpdate(Lobby l)
	{
		Lobby = l;
		StateHasChanged();
		return Task.CompletedTask;
	}

	public void Dispose() => Lobby.LobbyUpdated -= LobbyUpdate;
}